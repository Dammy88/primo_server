import { Injectable, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CommonApiService = /** @class */ (function () {
    function CommonApiService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    CommonApiService.prototype.commonApiGetService = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.http.get(url);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    CommonApiService.prototype.commonApiPostService = /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    function (url, body) {
        return this.http.post(url, body);
    };
    CommonApiService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    CommonApiService.ctorParameters = function () { return [
        { type: HttpClient, },
    ]; };
    return CommonApiService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var HeaderModule = /** @class */ (function () {
    function HeaderModule() {
    }
    HeaderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule
                    ],
                    declarations: [],
                    providers: [CommonApiService],
                    exports: []
                },] },
    ];
    return HeaderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HeaderModule, CommonApiService as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmhjLXNlcnZpY2VzLWxpYnJhcnkuanMubWFwIiwic291cmNlcyI6WyJuZzovL3JoYy1zZXJ2aWNlcy1saWJyYXJ5L2FwcC9tb2R1bGVzL2hlYWRlci9jb21tb24tYXBpLnNlcnZpY2UudHMiLCJuZzovL3JoYy1zZXJ2aWNlcy1saWJyYXJ5L2FwcC9tb2R1bGVzL2hlYWRlci9oZWFkZXIubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqcy9PYnNlcnZhYmxlXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb21tb25BcGlTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gICAgcHVibGljIGNvbW1vbkFwaUdldFNlcnZpY2UodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb21tb25BcGlQb3N0U2VydmljZSh1cmw6IHN0cmluZywgYm9keSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIGJvZHkpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IENvbW1vbkFwaVNlcnZpY2UgfSBmcm9tIFwiLi9jb21tb24tYXBpLnNlcnZpY2VcIjtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEh0dHBDbGllbnRNb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIF0sXHJcbiAgICBwcm92aWRlcnM6IFtDb21tb25BcGlTZXJ2aWNlXSxcclxuICAgIGV4cG9ydHM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIZWFkZXJNb2R1bGUgeyB9Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7SUFNSSwwQkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtLQUFLOzs7OztJQUVsQyw4Q0FBbUI7Ozs7Y0FBQyxHQUFXO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7Ozs7SUFHdkIsK0NBQW9COzs7OztjQUFDLEdBQVcsRUFBRSxJQUFJO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDOzs7Z0JBVHhDLFVBQVU7Ozs7Z0JBSEYsVUFBVTs7MkJBRG5COzs7Ozs7O0FDQUE7Ozs7Z0JBS0MsUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLGdCQUFnQjtxQkFDbkI7b0JBQ0QsWUFBWSxFQUFFLEVBQ2I7b0JBQ0QsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQzdCLE9BQU8sRUFBRSxFQUFFO2lCQUNkOzt1QkFkRDs7Ozs7Ozs7Ozs7Ozs7OyJ9